<Controls:MetroWindow x:Class="AutoDog.MainWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:Controls="clr-namespace:AutoDog.UI.Controls;assembly=AutoDog.UI"
                      xmlns:Dialog="clr-namespace:AutoDog.UI.Controls.Dialogs;assembly=AutoDog.UI"
                      xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                      xmlns:avalonEdit="https://github.com/devdiv/TestExecutePro.Eidtor"
                      xmlns:forms="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                      xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
                      xmlns:local="clr-namespace:AutoDog"
                      xmlns:view ="clr-namespace:AutoDog.Views"
                      xmlns:viewModels ="clr-namespace:AutoDog.ViewModels"
                      xmlns:converter ="clr-namespace:AutoDog.Converter"
                      xmlns:s="clr-namespace:System;assembly=mscorlib"
                      x:Name="mainWindow"
                      mc:Ignorable="d"
                      Title="AutoDog" 
                      Width="1200"
                      Height="800"
                      Dialog:DialogParticipation.Register="{Binding}"
                      d:DataContext="{d:DesignInstance local:Workspace}"
                      Icon="Images/AutoDog.png"
                      WindowStartupLocation="CenterScreen"
                      Closing="MainAutoTesting_WinddowClosing"
                      GlowBrush="{DynamicResource AccentColorBrush}"
                      LeftWindowCommandsOverlayBehavior="Never"
                      NonActiveGlowBrush="#CDFF0000"
                      RightWindowCommandsOverlayBehavior="Never"
                      ShowIconOnTitleBar="True"
                      ShowTitleBar="{Binding ShowMyTitleBar, Mode=OneWay}"
                      >
    <Window.Resources>
        <ResourceDictionary>
            <converter:ActiveDocumentConverter x:Key="ActiveDocumentConverter"/>
            <xcad:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
            
            <Ellipse x:Key="AppThemeMenuIcon"
                     Width="16"
                     Height="16"
                     x:Shared="False"
                     Fill="{Binding ColorBrush, Mode=OneWay}"
                     Stroke="{Binding BorderColorBrush, Mode=OneWay}"
                     StrokeThickness="1" />
            
            <Ellipse x:Key="AccentMenuIcon"
                     Width="16"
                     Height="16"
                     x:Shared="False"
                     Fill="{Binding ColorBrush, Mode=OneWay}" />

            <Style x:Key="AppThemeMenuItemStyle"
                   BasedOn="{StaticResource MetroMenuItem}"
                   TargetType="{x:Type MenuItem}">
                <Setter Property="Command" Value="{Binding ChangeAccentCommand}" />
                <Setter Property="Header" Value="{Binding Name, Mode=OneWay}" />
                <Setter Property="Icon" Value="{StaticResource AppThemeMenuIcon}" />
            </Style>

            <Style x:Key="AccentColorMenuItemStyle"
                   BasedOn="{StaticResource MetroMenuItem}"
                   TargetType="{x:Type MenuItem}">
                <Setter Property="Command" Value="{Binding ChangeAccentCommand}" />
                <Setter Property="Header" Value="{Binding Name, Mode=OneWay}" />
                <Setter Property="Icon" Value="{StaticResource AccentMenuIcon}" />
            </Style>

            <Dialog:CustomDialog x:Key="CustomDialogTest"
                                 x:Name="CustomTestDialog"
                                 Title="This dialog allows arbitrary content.">
                <TextBlock x:Name="MessageTextBlock"
                           Height="200"
                           Foreground="{DynamicResource AccentColorBrush}"
                           Text="{Binding Artists[0].Name}" />
            </Dialog:CustomDialog>

            <Dialog:CustomDialog x:Key="CustomCloseDialogTest"
                                 x:Name="CustomCloseDialogTest"
                                 Title="Custom Dialog which is awaitable">

                <StackPanel>
                    <TextBlock Height="30"
                               Foreground="{DynamicResource AccentColorBrush}"
                               Text="This dialog allows arbitrary content. You have to close it yourself by clicking the close button below."
                               TextWrapping="Wrap" />
                    <Button Click="CloseCustomDialog" Content="Close Me!" />
                </StackPanel>

            </Dialog:CustomDialog>

        </ResourceDictionary>
    </Window.Resources>

    <Controls:MetroWindow.WindowButtonCommands>
        <Controls:WindowButtonCommands Style="{DynamicResource AutoDog.UI.Styles.WindowButtonCommands.Win10}" />
    </Controls:MetroWindow.WindowButtonCommands>

    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands ShowLastSeparator="False">
            <Button Content="XXXX" ToolTip="Flyouts demo window" />
            <Button Click="LaunchAppsOnGitHub" ToolTip="AutoDog on GitHub">
                <iconPacks:PackIconModern Width="22"
                                          Height="22"
                                          Kind="SocialGithubOctocat" />
            </Button>
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="30" />
        </Grid.RowDefinitions>
        <Menu Height="30" Grid.Row="0">
            <MenuItem Header="文件(F)">
                <MenuItem Header="新建(N)">
                    <MenuItem Header="项目" Click="NewProject_Click">
                        <MenuItem.Icon>
                            <Image Source="Images/ProjectAdd.png" Height="18"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="文件" Command="{Binding NewFile}">
                        <MenuItem.Icon>
                            <Image Source="Images/DocumentClosed.png" Height="18"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="打开(O)">
                    <MenuItem Header="项目" Click="OpenProject_Click">
                        <MenuItem.Icon>
                            <Image Source="Images/ProjectDefault.png" Height="18"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="文件"  Command="{Binding OpenFile}">
                        <MenuItem.Icon>
                            <Image Source="Images/DocumentClosed.png" Height="18"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="添加(D)">
                    <MenuItem Header="新建项目">
                        <MenuItem.Icon>
                            <Image Source="Images/ProjectAdd.png" Height="18"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="现有项目">
                        <MenuItem.Icon>
                            <Image Source="Images/ProjectDefault.png" Height="18"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="关闭(C)" Command="{Binding ActiveDocument.CloseCommand}">
                </MenuItem>
                <MenuItem Header="关闭解决方案(T)">
                    <MenuItem.Icon>
                        <Image Source="Images/Delete.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="保存(S)   Ctrl + S" Command="{Binding ActiveDocument.SaveCommand}">
                    <MenuItem.Icon>
                        <Image Source="Images/Save.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="另存为(B)..." Command="{Binding ActiveDocument.SaveAsCommand}"/>
                <MenuItem Header="全部保存(L)   Ctrl + Shift + S">
                    <MenuItem.Icon>
                        <Image Source="Images/SaveAll.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="账户设置(I)..."/>
                <MenuItem Header="最近使用过的文件(F)"/>
                <MenuItem Header="最近使用过的项目和解决方案"/>
                <MenuItem Header="退出(X)   Ctrl + F4" Click="MainWindowExit_Click">
                    <MenuItem.Icon>
                        <Image Source="Images/WindowClose.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="编辑(E)">
                <MenuItem Header="撤销(U)   Ctrl + Z">
                    <MenuItem.Icon>
                        <Image Source="Images/Undo.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="重做(R)  Ctrl + Y">
                    <MenuItem.Icon>
                        <Image Source="Images/Redo.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="剪贴(T)  Ctrl + X">
                    <MenuItem.Icon>
                        <Image Source="Images/Cut.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="复制(C)  Ctrl + C">
                    <MenuItem.Icon>
                        <Image Source="Images/Copy.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="粘贴(P)  Ctrl + V">
                    <MenuItem.Icon>
                        <Image Source="Images/Paste.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="删除(D)  Del">
                    <MenuItem.Icon>
                        <Image Source="Images/Delete.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="查找和替换...(F)"/>
                <MenuItem Header="转到(G)...  Ctrl + G"/>
                <MenuItem Header="定位到(,)...  Ctrl + ,"/>
            </MenuItem>
            <MenuItem Header="视图(V)">
                <MenuItem Header="边框主题(T)"
                      ItemContainerStyle="{StaticResource AppThemeMenuItemStyle}"
                      ItemsSource="{Binding AppThemes, Mode=OneWay}" />
                <MenuItem Header="边框风格(S)"
                      ItemContainerStyle="{StaticResource AccentColorMenuItemStyle}"
                      ItemsSource="{Binding AccentColors, Mode=OneWay}" />
                <MenuItem Header="类视图(A)  Ctrl + Shift + C" IsChecked="{Binding ClassView.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
                <MenuItem Header="解决方案资源管理器(P)  Ctrl + Alt + L" IsChecked="{Binding SolutionView.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
                <MenuItem Header="属性窗口(W)  F4" IsChecked="{Binding FileStats.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
                <MenuItem Header="资源视图(R)  Ctrl + \. R" IsChecked="{Binding Resources.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
                <MenuItem Header="错误列表(I)  Ctrl + \. E" IsChecked="{Binding ErrorList.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
                <MenuItem Header="输出(O)  Ctrl + Alt + O" IsChecked="{Binding ErrorList.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
            </MenuItem>
            <MenuItem Header="项目(P)">
                <MenuItem Header="添加项目(P)...  Ctrl + Shift + N">
                    <MenuItem.Icon>
                        <Image Source="Images/ProjectAdd.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="添加文件夹(F)...  Ctrl + Shift + F">
                    <MenuItem.Icon>
                        <Image Source="Images/FolderAdd.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="添加文件(P)...">
                    <MenuItem.Icon>
                        <Image Source="Images/FileAdd.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>

            <MenuItem Header="生成(B)"></MenuItem>
            <MenuItem Header="调试(D)"></MenuItem>
            <MenuItem Header="团队(M)">
                <MenuItem Header="管理连接(N)..."/>
            </MenuItem>
            <MenuItem Header="工具(T)"></MenuItem>
            <MenuItem Header="体系结构(C)"></MenuItem>
            <MenuItem Header="测试(S)"></MenuItem>
            <MenuItem Header="窗口(W)">
                <MenuItem Header="保存窗口布局(S)" Command="{Binding SaveLayoutCommand, ElementName=mainWindow}"/>
                <MenuItem Header="重置窗口布局(R)" Command="{Binding LoadLayoutCommand, ElementName=mainWindow}"/>
            </MenuItem>
            <MenuItem Header="帮助(H)">
                <MenuItem Header="查看帮助(V)...  Ctrl + F1">
                    <MenuItem.Icon>
                        <Image Source="Images/Help.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="关于AutoDog(A)">
                    <MenuItem.Icon>
                        <Image Source="Images/About.png" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>

        <ToolBar Height="32" Grid.Row="1">
            <ToolBar.Resources>
                <Style TargetType="{x:Type Image}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                            <Setter Property="Opacity" Value="0.30" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ToolBar.Resources>
            <Button  Command="{Binding OpenFile}">
                <Image Source="Images/Open.png" Height="16"/>
            </Button>
            <Button Command="{Binding ActiveDocument.SaveCommand}">
                <Image Source="Images/Save.png" Height="16"/>
            </Button>
            <Separator/>
            <Button Command="Cut">
                <Image Source="Images/Cut.png" Height="16"/>
            </Button>
            <Button Command="Copy">
                <Image Source="Images/Copy.png" Height="16"/>
            </Button>
            <Button Command="Paste">
                <Image Source="Images/Paste.png" Height="16"/>
            </Button>
            <Button Command="Delete">
                <Image Source="Images/Delete.png" Height="16"/>
            </Button>
            <Separator/>
            <Button Command="Undo">
                <Image Source="Images/Undo.png" Height="16"/>
            </Button>
            <Button Command="Redo">
                <Image Source="Images/Redo.png" Height="16"/>
            </Button>
            <Separator/>
            <CheckBox IsChecked="{Binding Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type avalonEdit:TextEditor}},Path=ShowLineNumbers}">
                <Image Source="Images/WordWrap.png" Height="16"/>
            </CheckBox>
            <CheckBox IsChecked="{Binding Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type avalonEdit:TextEditor}},Path=ShowLineNumbers}">
                <TextBlock Width="16" TextAlignment="Center">#</TextBlock>
            </CheckBox>
            <CheckBox IsChecked="{Binding Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type avalonEdit:TextEditor}},Path=Options.ShowEndOfLine}">
                <TextBlock Width="16" TextAlignment="Center">¶</TextBlock>
            </CheckBox>
        </ToolBar>

        <xcad:DockingManager Name="dockManager" Grid.Row="2"
                             AnchorablesSource="{Binding Tools}" 
                             DocumentsSource="{Binding Files}"
                             ActiveContent="{Binding ActiveDocument, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}}">
            <xcad:DockingManager.Theme>
                <xcad:MetroTheme/>
            </xcad:DockingManager.Theme>
            <xcad:DockingManager.DocumentHeaderTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
                        <!-- Show IsReadOnly Icon in document tab if that properties' present and true -->
                        <Image Source="Images/App/DocTab/Lock-icon.png"
                   Margin="3,0,0,0"
                   VerticalAlignment="Center">
                            <Image.Visibility>
                                <PriorityBinding FallbackValue="Collapsed" >
                                    <Binding Path="Content.IsReadOnly" Mode="OneWay" Converter="{StaticResource BoolToVisibilityConverter}" />
                                </PriorityBinding>
                            </Image.Visibility>
                            <Image.ToolTip>
                                <PriorityBinding FallbackValue="">
                                    <Binding Path="Content.IsReadOnlyReason" Mode="OneWay" />
                                </PriorityBinding>
                            </Image.ToolTip>
                        </Image>
                    </StackPanel>
                </DataTemplate>
            </xcad:DockingManager.DocumentHeaderTemplate>
            <xcad:DockingManager.LayoutItemTemplateSelector>
                <local:PanesTemplateSelector>
                    <local:PanesTemplateSelector.FileViewTemplate>
                        <DataTemplate>
                            <avalonEdit:TextEditor Name="myEditor"
                                      Document="{Binding Document, UpdateSourceTrigger=PropertyChanged}"
                                      SyntaxHighlighting="{Binding HighlightDef}"
									  IsModified="{Binding Path=IsDirty, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      IsReadOnly="{Binding IsReadOnly}"
                                      >
                                <avalonEdit:TextEditor.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Command="Cut" Header="剪切">
                                            <MenuItem.Icon>
                                                <Image Source="Images/App/Edit_Cut32.png" Height="16"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Command="Copy" Header="复制">
                                            <MenuItem.Icon>
                                                <Image Source="Images/App/Edit_Copy32.png" Height="16"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Command="Paste" Header="粘贴">
                                            <MenuItem.Icon>
                                                <Image Source="Images/App/Edit_Paste32.png" Height="16"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Command="Delete" Header="删除">
                                            <MenuItem.Icon>
                                                <Image Source="Images/App/Edit_Delete32.png" Height="16"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Command="Undo" Header="撤销">
                                            <MenuItem.Icon>
                                                <Image Source="Images/App/Edit_Undo32.png" Height="16"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Command="Redo" Header="重做">
                                            <MenuItem.Icon>
                                                <Image Source="Images/App/Edit_Redo32.png" Height="16"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </ContextMenu>
                                </avalonEdit:TextEditor.ContextMenu>
                            </avalonEdit:TextEditor>
                        </DataTemplate>
                    </local:PanesTemplateSelector.FileViewTemplate >
                    <local:PanesTemplateSelector.FileStatsViewTemplate>
                        <DataTemplate>
                            <ScrollViewer>
                                <view:FileStatsTemplateView/>
                            </ScrollViewer>
                        </DataTemplate>
                    </local:PanesTemplateSelector.FileStatsViewTemplate>
                    <local:PanesTemplateSelector.SolutionViewTemplate>
                        <DataTemplate>
                            <ScrollViewer>
                                <view:SolutionTemplateView />
                            </ScrollViewer>
                        </DataTemplate>
                    </local:PanesTemplateSelector.SolutionViewTemplate>
                    <local:PanesTemplateSelector.ResourcesViewTemplate>
                        <DataTemplate>
                            <ScrollViewer >
                                <view:ResourcesTemplateView/>
                            </ScrollViewer>
                        </DataTemplate>
                    </local:PanesTemplateSelector.ResourcesViewTemplate>
                    <local:PanesTemplateSelector.ClassViewTemplate>
                        <DataTemplate>
                            <ScrollViewer >
                                <view:ClassTemplateView/>
                            </ScrollViewer>
                        </DataTemplate>
                    </local:PanesTemplateSelector.ClassViewTemplate>
                    <local:PanesTemplateSelector.ErrorListViewTemplate>
                        <DataTemplate>
                            <ScrollViewer>
                                <view:ErrorListTemplateView/>
                            </ScrollViewer>
                        </DataTemplate>
                    </local:PanesTemplateSelector.ErrorListViewTemplate>
                    <local:PanesTemplateSelector.OutPutViewTemplate>
                        <DataTemplate>
                            <ScrollViewer>
                                <view:OutPutTemplateView/>
                            </ScrollViewer>
                        </DataTemplate>
                    </local:PanesTemplateSelector.OutPutViewTemplate>
                </local:PanesTemplateSelector>
            </xcad:DockingManager.LayoutItemTemplateSelector>
            <xcad:DockingManager.LayoutItemContainerStyleSelector>
                <local:PanesStyleSelector>
                    <local:PanesStyleSelector.ToolStyle>
                        <Style TargetType="{x:Type xcad:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                            <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
                        </Style>
                    </local:PanesStyleSelector.ToolStyle>
                    <local:PanesStyleSelector.FileStyle>
                        <Style TargetType="{x:Type xcad:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                            <Setter Property="ToolTip" Value="{Binding Model.FilePath}"/>
                            <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
                            <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                        </Style>
                    </local:PanesStyleSelector.FileStyle>
                </local:PanesStyleSelector>
            </xcad:DockingManager.LayoutItemContainerStyleSelector>
            <xcad:DockingManager.LayoutUpdateStrategy>
                <local:LayoutInitializer/>
            </xcad:DockingManager.LayoutUpdateStrategy>
            <xcad:LayoutRoot x:Name="_layoutRoot">
            </xcad:LayoutRoot>
        </xcad:DockingManager>
        <StatusBar Grid.Row="3">
            <StatusBarItem>AutoDog.UI DEMO Application</StatusBarItem>
            <Separator Style="{StaticResource MetroStatusBarSeparator}" />
            <StatusBarItem>Selected Tab:</StatusBarItem>
            <StatusBarItem Content="{Binding ElementName=MainTabControl, Path=SelectedItem.Header, Mode=OneWay}" />
        </StatusBar>
    </Grid>
</Controls:MetroWindow>
